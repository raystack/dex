produces:
  - application/json
consumes:
  - application/json
schemes:
  - http
  - https
swagger: "2.0"

info:
  title: dex_api
  description: DEX API specifications.
  version: 0.1.0

paths:
  /dex/projects:
    get:
      summary: Get list of projects.
      description: Get list of projects.
      operationId: listProjects
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/ProjectArray"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/projects/{slug}:
    get:
      summary: Get project by slug.
      description: Get project by its unique slug name.
      operationId: getProjectBySlug
      parameters:
        - in: path
          name: slug
          type: string
          required: true
          description: Unique slug of the project.
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Project"
        "404":
          description: project not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses:
    get:
      summary: Get list of firehoses.
      description: Get list of firehoses in this project.
      operationId: listFirehoses
      parameters:
        - in: query
          name: project
          type: string
          required: true
          description: Unique identifier of the project.
        - in: query
          name: group
          type: string
          required: false
          description: Return firehoses belonging to only this group.
        - in: query
          name: kube_cluster
          type: string
          required: false
          description: Return firehoses belonging to only this kubernetes cluster.
        - in: query
          name: status
          type: string
          enum:
            - "RUNNING"
            - "STOPPED"
          required: false
          description: Return firehoses only with this status.
        - in: query
          name: topic_name
          type: string
          required: false
          description: Return firehoses that are consuming from this topic.
        - in: query
          name: stream_name
          type: string
          required: false
          description: |
            Return firehoses that are consuming from this stream.
            Usually stream refers to the kafka cluster.
        - in: query
          name: sink_type
          type: array
          items:
            type: string
          collectionFormat: csv
          enum:
            - "LOG"
            - "HTTP"
            - "POSTGRES"
            - "INFLUXDB"
            - "ELASTIC"
            - "REDIS"
            - "GRPC"
            - "PROMETHEUS"
            - "BIGQUERY"
            - "BLOB"
            - "BIGTABLE"
          required: false
          description: Return firehoses with this sink type.
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/FirehoseArray"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      summary: Create a new firehose.
      description: Create and deploy a new firehose as per the configurations in the body.
      operationId: createFirehose
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Firehose"
      responses:
        "201":
          description: Successfully created
          schema:
            $ref: "#/definitions/Firehose"
        "400":
          description: Request was invalid.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: A firehose with same unique identifier already exists.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses/{firehoseUrn}:
    parameters:
      - in: path
        name: firehoseUrn
        type: string
        required: true
        description: URN of the firehose.
    get:
      summary: Get firehose by URN.
      operationId: getFirehose
      description: Get firehose by URN.
      responses:
        "200":
          description: Found firehose with given URN
          schema:
            $ref: "#/definitions/Firehose"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      summary: Update firehose configurations.
      description: Update firehose configurations.
      operationId: updateFirehose
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              description:
                type: string
                example: "This firehose consumes from booking events and ingests to redis"
              configs:
                type: object
                $ref: "#/definitions/FirehoseConfig"
      responses:
        "200":
          description: Found firehose with given URN
          schema:
            $ref: "#/definitions/Firehose"
        "400":
          description: Update request is not valid.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      summary: Update firehose configurations partially.
      description: Update firehose configurations partially.
      operationId: partialUpdateFirehose
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              description:
                type: string
                example: "This firehose consumes from booking events and ingests to redis"
              configs:
                type: object
                $ref: "#/definitions/FirehosePartialConfig"
      responses:
        "200":
          description: Found firehose with given URN
          schema:
            $ref: "#/definitions/Firehose"
        "400":
          description: Update request is not valid.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /dex/firehoses/{firehoseUrn}/reset:
    parameters:
      - in: path
        type: string
        name: firehoseUrn
        description: URN of the firehose.
        required: true
    post:
      summary: Reset firehose consumption offset.
      description: Reset firehose consumption offset.
      operationId: resetOffset
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
              - "to"
            properties:
              to:
                type: string
                enum:
                  - "DATETIME"
                  - "EARLIEST"
                  - "LATEST"
              datetime:
                type: string
                format: date-time
                example: "2022-10-10T10:10:10.100Z"
      responses:
        "200":
          description: Found firehose with given URN
          schema:
            $ref: "#/definitions/Firehose"
        "400":
          description: Update request is not valid.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses/{firehoseUrn}/scale:
    parameters:
      - in: path
        type: string
        name: firehoseUrn
        description: URN of the firehose.
        required: true
    post:
      summary: Scale the number of instances of firehose.
      description: Scale the number of instances of firehose.
      operationId: scaleFirehose
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
              - "replicas"
            properties:
              replicas:
                type: number
                example: 2
                description: Number of replicas to run.
      responses:
        "200":
          description: Successfully applied update.
          schema:
            $ref: "#/definitions/Firehose"
        "400":
          description: Update request is not valid.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses/{firehoseUrn}/start:
    parameters:
      - in: path
        type: string
        name: firehoseUrn
        description: URN of the firehose.
        required: true
    put:
      summary: Start the Firehose if it is currently stopped.
      description: Start the Firehose if it is currently stopped.
      operationId: startFirehose
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties: { }
      responses:
        "200":
          description: Successfully applied update.
          schema:
            $ref: "#/definitions/Firehose"
        "400":
          description: Update request is not valid.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses/{firehoseUrn}/stop:
    parameters:
      - in: path
        type: string
        name: firehoseUrn
        description: URN of the firehose.
        required: true
    put:
      summary: Stop the Firehose if it is currently running.
      description: Stop the Firehose if it is currently running.
      operationId: stopFirehose
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
              - "replicas"
            properties: { }
      responses:
        "200":
          description: Successfully applied update.
          schema:
            $ref: "#/definitions/Firehose"
        "400":
          description: Update request is not valid.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses/{firehoseUrn}/upgrade:
    parameters:
      - in: path
        type: string
        name: firehoseUrn
        description: URN of the firehose.
        required: true
    put:
      summary: Upgrade the firehose to the latest version supported.
      description: Upgrade the firehose to the latest version supported.
      operationId: upgradeFirehose
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties: { }
      responses:
        "200":
          description: Upgrade request accepted.
          schema:
            $ref: "#/definitions/Firehose"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses/{firehoseUrn}/logs:
    parameters:
      - in: path
        name: firehoseUrn
        type: string
        required: true
        description: URN of the firehose.
    get:
      summary: Stream logs for a Firehose.
      description: Stream logs for a Firehose.
      operationId: getFirehoseLogs
      produces:
        - "application/x-ndjson"
        - "text/plain"
      parameters:
        - in: query
          name: pod
          type: string
          required: false
          description: Return logs for selected pod.
        - in: query
          name: container
          type: string
          required: false
          description: Return logs for selected container.
        - in: query
          name: since_seconds
          type: integer
          minimum: 1
          required: false
          description: Return logs since given seconds ago
        - in: query
          name: tail_lines
          type: integer
          minimum: 1
          required: false
          description: Number of lines from the end of the logs to show.
        - in: query
          name: follow
          type: boolean
          default: true
          required: false
          description: Follow the log stream of the firehose.
        - in: query
          name: previous
          type: boolean
          required: false
          description: Return previous terminated container logs.
        - in: query
          name: timestamps
          type: boolean
          required: false
          description: Add a timestamp at the beginning of every line of log output.
      responses:
        "200":
          description: Found logs for given firehose URN.
          schema:
            type: string
            format: binary
        "400":
          description: Get logs request is not valid.
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses/{firehoseUrn}/alertPolicy:
    parameters:
      - in: path
        name: firehoseUrn
        type: string
        required: true
        description: URN of the firehose.
    get:
      summary: Alert policy for a Firehose.
      description: Alert policy for a Firehose.
      operationId: getFirehoseAlertPolicy
      responses:
        "200":
          description: Found alert policy for given firehose URN.
          schema:
            $ref: "#/definitions/AlertPolicy"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      summary: Upsert alert policy for a Firehose.
      description: Upsert alert policy for a Firehose.
      operationId: upsertFirehoseAlertPolicy
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/AlertPolicy"
      responses:
        "200":
          description: Updated alert policy for firehose.
          schema:
            $ref: "#/definitions/AlertPolicy"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses/{firehoseUrn}/alerts:
    parameters:
      - in: path
        name: firehoseUrn
        type: string
        required: true
        description: URN of the firehose.
    get:
      summary: Triggered alerts for a Firehose.
      description: Triggered alerts for a Firehose.
      operationId: getFirehoseAlerts
      responses:
        "200":
          description: alerts for given firehose URN.
          schema:
            $ref: "#/definitions/AlertArray"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/firehoses/{firehoseUrn}/history:
    parameters:
      - in: path
        name: firehoseUrn
        type: string
        required: true
        description: URN of the firehose.
    get:
      summary: History for a Firehose.
      description: History for a Firehose.
      operationId: getFirehoseHistory
      responses:
        "200":
          description: History for given firehose URN.
          schema:
            $ref: "#/definitions/History"
        "404":
          description: Firehose with given URN was not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/alertTemplates:
    get:
      summary: Get list of alert templates for firehose.
      description: Get list of alert templates for firehose.
      operationId: listAlertTemplates
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/AlertTemplatesArray"
        "500":
          description: internal error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /dex/kubernetes:
    parameters:
      - in: query
        name: projectSlug
        type: string
        required: true
        description: Unique identifier of the project.
    get:
      summary: Get list of kubernetes.
      description: Get list of kubernetes in this project.
      operationId: listKubernetes
      parameters:
        - in: query
          name: tag[]
          type: array
          items:
            type: string
          required: false
          description: Tags to filter by (e.g., `firehose:true`).
          collectionFormat: multi
      responses:
        "200":
          description: Successful Operation.
          schema:
            $ref: "#/definitions/KubernetesArray"
        "500":
          description: Internal Error
          schema:
            $ref: "#/definitions/ErrorResponse"

definitions:
  ErrorResponse:
    type: object
    properties:
      message:
        type: string
        example: "Request is invalid"
      cause:
        type: string
        example: "name must not be empty"
      code:
        type: string
        example: "internal_error"
        enum:
          - conflict
          - not_found
          - bad_request
          - internal_error
  ProjectArray:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Project"
  Project:
    type: object
    properties:
      id:
        type: string
        example: "foo"
        readOnly: true
      name:
        type: string
        example: "Project Foo"
      slug:
        type: string
        example: "project-foo"
      created_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
      updated_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
      metadata:
        type: object
        example:
          environment: "production"
          landscape: "systems"
          organization: "foo"
  FirehoseArray:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Firehose"
  Firehose:
    type: object
    required:
      - configs
      - title
      - group
    properties:
      urn:
        type: string
        example: "orn:foo:firehose:fh1"
        readOnly: true
      title:
        type: string
        example: "Booking Events Ingester"
      name:
        type: string
        example: "booking-events-ingester"
        pattern: "^[A-Za-z][\\w-]+[A-Za-z0-9]$"
      project:
        type: string
        example: "g-goto-id"
      created_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
      updated_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
      description:
        type: string
        example: "This firehose consumes from booking events and ingests to redis"
      group:
        type: string
        format: uuid
        example: "e144ea5e-c7d6-48c4-a580-db31cb3389aa"
      configs:
        $ref: "#/definitions/FirehoseConfig"
      state:
        $ref: "#/definitions/FirehoseState"
      labels:
        type: object
        additionalProperties:
          type: string

  FirehosePartialConfig:
    type: object
    properties:
      stopped:
        type: boolean
        x-nullable: true
        default: null
        description: Set to true/false to stop or start the firehose.
      image:
        type: string
        example: "gotocompany/firehose:0.1.0"
        description: Set to non-empty string to update
      stream_name:
        type: string
        description: Set to non-empty string to update
      replicas:
        type: number
        description: Set to a value greater than 0 to update.
      stop_time:
        type: string
        x-nullable: true
        description: |
          - Omit this field to not update.
          - Setting it to a non-empty string to update.
          - Set it to empty string to remove the current stop_time.
      env_vars:
        type: object
        description: If specified, it will be merged with the current configs.
        additionalProperties:
          type: string

  FirehoseConfig:
    type: object
    required:
      - stream_name
      - env_vars
      - kube_cluster
    properties:
      stopped:
        type: boolean
      image:
        type: string
        example: "gotocompany/firehose:0.1.0"
      stream_name:
        type: string
      kube_cluster:
        type: string
        example: "orn:entropy:kubernetes:sample_project:sample_name"
      replicas:
        type: number
        default: 1
        minimum: 1
      stop_time:
        type: string
        format: date-time
        x-nullable: true
      deployment_id:
        type: string
      env_vars:
        type: object
        additionalProperties:
          type: string
  FirehoseState:
    type: object
    properties:
      status:
        type: string
      output:
        type: object
        additionalProperties: true
  Logs:
    type: array
    items:
      type: object
      properties:
        data:
          type: string
        filter:
          type: object

  Rule:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      template:
        type: string
      enabled:
        type: boolean
      created_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
      updated_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
      variables:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            type:
              type: string
            value:
              type: string
            description:
              type: string
  AlertPolicy:
    type: object
    properties:
      resource: # siren calls it namespace, since on platform side we will use it for resources
        type: string
        readOnly: true
      rules:
        type: array
        items:
          $ref: "#/definitions/Rule"
  Alert:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      resource:
        type: string
      metric:
        type: string
      value:
        type: string
      severity:
        type: string
      rule:
        type: string
      triggered_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
  AlertArray:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Alert"
  AlertTemplate:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      body:
        type: string
      tags:
        type: array
        items:
          type: string
      created_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
      updated_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
      variables:
        type: object
        properties:
          name:
            type: string
          type:
            type: string
          default:
            type: string
          description:
            type: string
  AlertTemplatesArray:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/AlertTemplate"

  History:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/RevisionDiff"
  RevisionDiff:
    type: object
    properties:
      diff:
        type: object
      reason:
        type: string
      updated_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true

  KubernetesArray:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Kubernetes"
  Kubernetes:
    type: object
    properties:
      urn:
        type: string
        example: "orn:foo:kubernetes:k8s1"
        readOnly: true
      name:
        type: string
        example: k8s1
      created_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
      updated_at:
        type: string
        format: date-time
        example: "2022-06-23T16:49:15.885541Z"
        readOnly: true
