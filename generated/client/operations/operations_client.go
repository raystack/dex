// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFirehose(params *CreateFirehoseParams, opts ...ClientOption) (*CreateFirehoseCreated, error)

	GetFirehose(params *GetFirehoseParams, opts ...ClientOption) (*GetFirehoseOK, error)

	GetFirehoseAlertPolicy(params *GetFirehoseAlertPolicyParams, opts ...ClientOption) (*GetFirehoseAlertPolicyOK, error)

	GetFirehoseAlerts(params *GetFirehoseAlertsParams, opts ...ClientOption) (*GetFirehoseAlertsOK, error)

	GetFirehoseHistory(params *GetFirehoseHistoryParams, opts ...ClientOption) (*GetFirehoseHistoryOK, error)

	GetFirehoseLogs(params *GetFirehoseLogsParams, writer io.Writer, opts ...ClientOption) (*GetFirehoseLogsOK, error)

	GetProjectBySlug(params *GetProjectBySlugParams, opts ...ClientOption) (*GetProjectBySlugOK, error)

	ListAlertTemplates(params *ListAlertTemplatesParams, opts ...ClientOption) (*ListAlertTemplatesOK, error)

	ListFirehoses(params *ListFirehosesParams, opts ...ClientOption) (*ListFirehosesOK, error)

	ListKubernetes(params *ListKubernetesParams, opts ...ClientOption) (*ListKubernetesOK, error)

	ListProjects(params *ListProjectsParams, opts ...ClientOption) (*ListProjectsOK, error)

	ResetOffset(params *ResetOffsetParams, opts ...ClientOption) (*ResetOffsetOK, error)

	ScaleFirehose(params *ScaleFirehoseParams, opts ...ClientOption) (*ScaleFirehoseOK, error)

	StartFirehose(params *StartFirehoseParams, opts ...ClientOption) (*StartFirehoseOK, error)

	StopFirehose(params *StopFirehoseParams, opts ...ClientOption) (*StopFirehoseOK, error)

	UpdateFirehose(params *UpdateFirehoseParams, opts ...ClientOption) (*UpdateFirehoseOK, error)

	UpgradeFirehose(params *UpgradeFirehoseParams, opts ...ClientOption) (*UpgradeFirehoseOK, error)

	UpsertFirehoseAlertPolicy(params *UpsertFirehoseAlertPolicyParams, opts ...ClientOption) (*UpsertFirehoseAlertPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateFirehose creates a new firehose

Create and deploy a new firehose as per the configurations in the body.
*/
func (a *Client) CreateFirehose(params *CreateFirehoseParams, opts ...ClientOption) (*CreateFirehoseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFirehoseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFirehose",
		Method:             "POST",
		PathPattern:        "/projects/{projectSlug}/firehoses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFirehoseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFirehoseCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFirehose: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFirehose gets firehose by u r n

Get firehose by URN.
*/
func (a *Client) GetFirehose(params *GetFirehoseParams, opts ...ClientOption) (*GetFirehoseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFirehoseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFirehose",
		Method:             "GET",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFirehoseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFirehoseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFirehose: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFirehoseAlertPolicy alerts policy for a firehose

Alert policy for a Firehose.
*/
func (a *Client) GetFirehoseAlertPolicy(params *GetFirehoseAlertPolicyParams, opts ...ClientOption) (*GetFirehoseAlertPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFirehoseAlertPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFirehoseAlertPolicy",
		Method:             "GET",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/alertPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFirehoseAlertPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFirehoseAlertPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFirehoseAlertPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFirehoseAlerts triggereds alerts for a firehose

Triggered alerts for a Firehose.
*/
func (a *Client) GetFirehoseAlerts(params *GetFirehoseAlertsParams, opts ...ClientOption) (*GetFirehoseAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFirehoseAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFirehoseAlerts",
		Method:             "GET",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFirehoseAlertsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFirehoseAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFirehoseAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFirehoseHistory histories for a firehose

History for a Firehose.
*/
func (a *Client) GetFirehoseHistory(params *GetFirehoseHistoryParams, opts ...ClientOption) (*GetFirehoseHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFirehoseHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFirehoseHistory",
		Method:             "GET",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFirehoseHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFirehoseHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFirehoseHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFirehoseLogs streams logs for a firehose

Stream logs for a Firehose.
*/
func (a *Client) GetFirehoseLogs(params *GetFirehoseLogsParams, writer io.Writer, opts ...ClientOption) (*GetFirehoseLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFirehoseLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFirehoseLogs",
		Method:             "GET",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/logs",
		ProducesMediaTypes: []string{"application/x-ndjson", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFirehoseLogsReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFirehoseLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFirehoseLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectBySlug gets project by slug

Get project by its unique slug name.
*/
func (a *Client) GetProjectBySlug(params *GetProjectBySlugParams, opts ...ClientOption) (*GetProjectBySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectBySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectBySlug",
		Method:             "GET",
		PathPattern:        "/projects/{slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectBySlugReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectBySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectBySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAlertTemplates gets list of alert templates for firehose

Get list of alert templates for firehose.
*/
func (a *Client) ListAlertTemplates(params *ListAlertTemplatesParams, opts ...ClientOption) (*ListAlertTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAlertTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAlertTemplates",
		Method:             "GET",
		PathPattern:        "/alertTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAlertTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAlertTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAlertTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListFirehoses gets list of firehoses

Get list of firehoses in this project.
*/
func (a *Client) ListFirehoses(params *ListFirehosesParams, opts ...ClientOption) (*ListFirehosesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFirehosesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFirehoses",
		Method:             "GET",
		PathPattern:        "/projects/{projectSlug}/firehoses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFirehosesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFirehosesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFirehoses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListKubernetes gets list of kubernetes

Get list of kubernetes in this project.
*/
func (a *Client) ListKubernetes(params *ListKubernetesParams, opts ...ClientOption) (*ListKubernetesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListKubernetesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listKubernetes",
		Method:             "GET",
		PathPattern:        "/projects/{projectSlug}/kubernetes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListKubernetesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListKubernetesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listKubernetes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjects gets list of projects

Get list of projects.
*/
func (a *Client) ListProjects(params *ListProjectsParams, opts ...ClientOption) (*ListProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjects",
		Method:             "GET",
		PathPattern:        "/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResetOffset resets firehose consumption offset

Reset firehose consumption offset.
*/
func (a *Client) ResetOffset(params *ResetOffsetParams, opts ...ClientOption) (*ResetOffsetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetOffsetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resetOffset",
		Method:             "POST",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResetOffsetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetOffsetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resetOffset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScaleFirehose scales the number of instances of firehose

Scale the number of instances of firehose.
*/
func (a *Client) ScaleFirehose(params *ScaleFirehoseParams, opts ...ClientOption) (*ScaleFirehoseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScaleFirehoseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scaleFirehose",
		Method:             "POST",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/scale",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScaleFirehoseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScaleFirehoseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scaleFirehose: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartFirehose starts the firehose if it is currently stopped

Start the Firehose if it is currently stopped.
*/
func (a *Client) StartFirehose(params *StartFirehoseParams, opts ...ClientOption) (*StartFirehoseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartFirehoseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startFirehose",
		Method:             "POST",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartFirehoseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartFirehoseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startFirehose: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopFirehose stops the firehose if it is currently running

Stop the Firehose if it is currently running.
*/
func (a *Client) StopFirehose(params *StopFirehoseParams, opts ...ClientOption) (*StopFirehoseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopFirehoseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopFirehose",
		Method:             "POST",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopFirehoseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopFirehoseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopFirehose: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFirehose updates firehose configurations

Update firehose configurations.
*/
func (a *Client) UpdateFirehose(params *UpdateFirehoseParams, opts ...ClientOption) (*UpdateFirehoseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFirehoseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFirehose",
		Method:             "PUT",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFirehoseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFirehoseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFirehose: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeFirehose upgrades the firehose to the latest version supported

Upgrade the firehose to the latest version supported.
*/
func (a *Client) UpgradeFirehose(params *UpgradeFirehoseParams, opts ...ClientOption) (*UpgradeFirehoseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeFirehoseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeFirehose",
		Method:             "POST",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpgradeFirehoseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeFirehoseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgradeFirehose: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertFirehoseAlertPolicy upserts alert policy for a firehose

Upsert alert policy for a Firehose.
*/
func (a *Client) UpsertFirehoseAlertPolicy(params *UpsertFirehoseAlertPolicyParams, opts ...ClientOption) (*UpsertFirehoseAlertPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertFirehoseAlertPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upsertFirehoseAlertPolicy",
		Method:             "PUT",
		PathPattern:        "/projects/{projectSlug}/firehoses/{firehoseUrn}/alertPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpsertFirehoseAlertPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertFirehoseAlertPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upsertFirehoseAlertPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
