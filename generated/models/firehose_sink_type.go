// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FirehoseSinkType firehose sink type
//
// swagger:model FirehoseSinkType
type FirehoseSinkType string

func NewFirehoseSinkType(value FirehoseSinkType) *FirehoseSinkType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FirehoseSinkType.
func (m FirehoseSinkType) Pointer() *FirehoseSinkType {
	return &m
}

const (

	// FirehoseSinkTypeLOG captures enum value "LOG"
	FirehoseSinkTypeLOG FirehoseSinkType = "LOG"

	// FirehoseSinkTypeHTTP captures enum value "HTTP"
	FirehoseSinkTypeHTTP FirehoseSinkType = "HTTP"

	// FirehoseSinkTypePOSTGRES captures enum value "POSTGRES"
	FirehoseSinkTypePOSTGRES FirehoseSinkType = "POSTGRES"

	// FirehoseSinkTypeINFLUXDB captures enum value "INFLUXDB"
	FirehoseSinkTypeINFLUXDB FirehoseSinkType = "INFLUXDB"

	// FirehoseSinkTypeELASTIC captures enum value "ELASTIC"
	FirehoseSinkTypeELASTIC FirehoseSinkType = "ELASTIC"

	// FirehoseSinkTypeREDIS captures enum value "REDIS"
	FirehoseSinkTypeREDIS FirehoseSinkType = "REDIS"

	// FirehoseSinkTypeGRPC captures enum value "GRPC"
	FirehoseSinkTypeGRPC FirehoseSinkType = "GRPC"

	// FirehoseSinkTypePROMETHEUS captures enum value "PROMETHEUS"
	FirehoseSinkTypePROMETHEUS FirehoseSinkType = "PROMETHEUS"

	// FirehoseSinkTypeBIGQUERY captures enum value "BIGQUERY"
	FirehoseSinkTypeBIGQUERY FirehoseSinkType = "BIGQUERY"

	// FirehoseSinkTypeBLOB captures enum value "BLOB"
	FirehoseSinkTypeBLOB FirehoseSinkType = "BLOB"

	// FirehoseSinkTypeBIGTABLE captures enum value "BIGTABLE"
	FirehoseSinkTypeBIGTABLE FirehoseSinkType = "BIGTABLE"
)

// for schema
var firehoseSinkTypeEnum []interface{}

func init() {
	var res []FirehoseSinkType
	if err := json.Unmarshal([]byte(`["LOG","HTTP","POSTGRES","INFLUXDB","ELASTIC","REDIS","GRPC","PROMETHEUS","BIGQUERY","BLOB","BIGTABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firehoseSinkTypeEnum = append(firehoseSinkTypeEnum, v)
	}
}

func (m FirehoseSinkType) validateFirehoseSinkTypeEnum(path, location string, value FirehoseSinkType) error {
	if err := validate.EnumCase(path, location, value, firehoseSinkTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this firehose sink type
func (m FirehoseSinkType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFirehoseSinkTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this firehose sink type based on context it is used
func (m FirehoseSinkType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
